<goal> ::= <translation-unit>
<translation-unit> ::= <external-declaration>
<translation-unit> ::= <translation-unit> <external-declaration>

<external-declaration> ::= <function-definition>
<external-declaration> ::= <declaration>

<function-definition> ::= <declaration-specifiers> <declarator> <declaration-list> <compound-statement>
<function-definition> ::= <declarator> <declaration-list> <compound-statement>
<function-definition> ::= <declaration-specifiers> <declarator> <compound-statement>
<function-definition> ::= <declarator> <compound-statement>

<declaration> ::= <declaration-specifiers> <init-declarator-list> ";"
<declaration> ::= <declaration-specifiers>";"

<declaration-list> ::= <declaration>
<declaration-list> ::= <declaration-list> <declaration>

<declaration-specifiers> ::= <type-specifier> <declaration-specifiers>
<declaration-specifiers> ::= <type-specifier>

<type-specifier> ::= "void"
<type-specifier> ::= "char"
<type-specifier> ::= "int"
<type-specifier> ::= "signed"
<type-specifier> ::= "unsigned"



<init-declarator-list> ::= <init-declarator>
<init-declarator-list> ::= <init-declarator-list>"," <init-declarator>

<init-declarator> ::= <declarator>
<init-declarator> ::= <declarator> "=" <initializer>

<specifier-qualifier-list> ::= <type-specifier> <specifier-qualifier-list>
<specifier-qualifier-list> ::= <type-specifier>
<specifier-qualifier-list> ::= <specifier-qualifier-list>


<declarator> ::= <pointer> <direct-declarator>
<declarator> ::= <direct-declarator>

<direct-declarator> ::= "identifier"
<direct-declarator> ::= "("<declarator>")"
<direct-declarator> ::= <direct-declarator> "[" <constant-expression> "]"
<direct-declarator> ::= <direct-declarator> "[" "]"
<direct-declarator> ::= <direct-declarator> "(" <parameter-type-list> ")"
<direct-declarator> ::= <direct-declarator> "(" <identifier-listopt> ")"
<direct-declarator> ::= <direct-declarator> "(" ")"

<pointer> ::= "*"
<pointer> ::= "*" <pointer>

<parameter-type-list> ::= <parameter-list>

<parameter-list> ::= <parameter-declaration>
<parameter-list> ::= <parameter-list> "," <parameter-declaration>

<parameter-declaration> ::= <declaration-specifiers> <declarator>
<parameter-declaration> ::= <declaration-specifiers> <abstract-declarator>
<parameter-declaration> ::= <declaration-specifiers>

<identifier-list> ::= "identifier"
<identifier-list> ::= <identifier-list> "," "identifier"

<initializer> ::= <assignment-expression>
<initializer> ::= "{" <initializer-list> "}"
<initializer> ::= "{" <initializer-list> "," "}"

<initializer-list> ::= <initializer>
<initializer-list> ::= <initializer-list> "," <initializer>

<type-name> ::= <specifier-qualifier-list> <abstract-declarator>
<type-name> ::= <specifier-qualifier-list>

<abstract-declarator> ::= <pointer>
<abstract-declarator> ::= <pointer> <direct-abstract-declarator>
<abstract-declarator> ::= <direct-abstract-declarator>

<direct-abstract-declarator> ::= "(" <abstract-declarator> ")"
<direct-abstract-declarator> ::= <direct-abstract-declarator> "["<constant-expression>"]"
<direct-abstract-declarator> ::= "["<constant-expression>"]"
<direct-abstract-declarator> ::= <direct-abstract-declarator> "[""]"
<direct-abstract-declarator> ::= "[""]"
<direct-abstract-declarator> ::= <direct-abstract-declarator> "("<parameter-type-list>")"
<direct-abstract-declarator> ::= "("<parameter-type-list>")"
<direct-abstract-declarator> ::= <direct-abstract-declarator> "("")"
<direct-abstract-declarator> ::= "("")"

<statement> ::= <labeled-statement>
<statement> ::= <expression-statement>
<statement> ::= <compound-statement>
<statement> ::= <selection-statement>
<statement> ::= <iteration-statement>
<statement> ::= <jump-statement>

<labeled-statement> ::= "identifier" ":" <statement>

<expression-statement> ::= <expression>";"
<expression-statement> ::= ";"

<compound-statement> ::= "{" <declaration-list> <statement-list> "}"
<compound-statement> ::= "{" <statement-list> "}"
<compound-statement> ::= "{" <declaration-list> "}"
<compound-statement> ::= "{" "}"

<statement-list> ::= <statement>
<statement-list> ::= <statement-list> <statement>

<selection-statement> ::= "if" "("<expression>")" <statement>
<selection-statement> ::= "if" "("<expression>")" <statement> "else" <statement>

<iteration-statement> ::= "while" "("<expression>")" <statement>
<iteration-statement> ::= "do" <statement> "while" "("<expression>")"";"

<jump-statement> ::= "goto" "identifier" ";"
<jump-statement> ::= "continue"";"
<jump-statement> ::= "break"";"
<jump-statement> ::= "return" <expression> ";"
<jump-statement> ::= "return" ";"

<expression> ::= <assignment-expression>
<expression> ::= <expression> "," <assignment-expression>

<assignment-expression> ::= <conditional-expression>
<assignment-expression> ::= <unary-expression> <assignment-operator> <assignment-expression>

<assignment-operator> ::= "="
<assignment-operator> ::= "*="
<assignment-operator> ::= "/="
<assignment-operator> ::= "%="
<assignment-operator> ::= "+="
<assignment-operator> ::= "-="
<assignment-operator> ::= "<<="
<assignment-operator> ::= ">>="
<assignment-operator> ::= "&="
<assignment-operator> ::= "^="
<assignment-operator> ::= "|="

<conditional-expression> ::= <logical-OR-expression>
<conditional-expression> ::= <logical-OR-expression> "?" <expression> ":" <conditional-expression>

<constant-expression> ::= <conditional-expression>

<logical-OR-expression> ::= <logical-AND-expression>
<logical-OR-expression> ::= <logical-OR-expression> "||" <logical-AND-expression>

<logical-AND-expression> ::= <inclusive-OR-expression>
<logical-AND-expression> ::= <logical-AND-expression> "&&" <inclusive-OR-expression>

<inclusive-OR-expression> ::= <exclusive-OR-expression>
<inclusive-OR-expression> ::= <inclusive-OR-expression> "|" <exclusive-OR-expression>

<exclusive-OR-expression> ::= <AND-expression>
<exclusive-OR-expression> ::= <exclusive-OR-expression> "^" <AND-expression>

<AND-expression> ::= <equality-expression>
<AND-expression> ::= <AND-expression> "&" <equality-expression>

<equality-expression> ::= <relational-expression>
<equality-expression> ::= <equality-expression> "==" <relational-expression>
<equality-expression> ::= <equality-expression> "!=" <relational-expression>

<relational-expression> ::= <shift-expression>
<relational-expression> ::= <relational-expression> "<" <shift-expression>
<relational-expression> ::= <relational-expression> ">" <shift-expression>
<relational-expression> ::= <relational-expression> "<=" <shift-expression>
<relational-expression> ::= <relational-expression> ">=" <shift-expression>

<shift-expression> ::= <additive-expression>
<shift-expression> ::= <shift-expression> "<<" <additive-expression>
<shift-expression> ::= <shift-expression> ">>" <additive-expression>

<additive-expression> ::= <multiplicative-expression>
<additive-expression> ::= <additive-expression> "+" <multiplicative-expression>
<additive-expression> ::= <additive-expression> "-" <multiplicative-expression>

<multiplicative-expression> ::= <multiplicative-expression> "*" <cast-expression>
<multiplicative-expression> ::= <multiplicative-expression> "/" <cast-expression>
<multiplicative-expression> ::= <multiplicative-expression> "%" <cast-expression>

<cast-expression> ::= <unary-expression>
<cast-expression> ::= "("<type-name>")" <cast-expression>

<unary-expression> ::= <postfix-expression>
<unary-expression> ::= "++" <unary-expression>
<unary-expression> ::= "--"<unary-expression>
<unary-expression> ::= <unary-operator> <cast-expression>
<unary-expression> ::= "sizeof" <unary-expression>
<unary-expression> ::= "sizeof" "("<type-name>")"

<unary-operator> ::= "&"
<unary-operator> ::= "*"
<unary-operator> ::= "+"
<unary-operator> ::= "-"
<unary-operator> ::= "~"
<unary-operator> ::= "!"


<postfix-expression> ::= <primary-expression>
<postfix-expression> ::= <postfix-expression> "["<expression>"]"
<postfix-expression> ::= <postfix-expression> "("<argument-expression-list>")"
<postfix-expression> ::= <postfix-expression> "("")"
<postfix-expression> ::= <postfix-expression> "++"
<postfix-expression> ::= <postfix-expression> "--"

<primary-expression> ::= "identifier"
<primary-expression> ::= <constant>
<primary-expression> ::= "string"
<primary-expression> ::= "("<expression>")"

<argument-expression-list> ::= <assignment-expression>
<argument-expression-list> ::= <argument-expression-list> "," <assignment-expression>

<constant> ::= "integer-constant"
<constant> ::= "character-constant"
